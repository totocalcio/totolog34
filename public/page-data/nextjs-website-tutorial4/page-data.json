{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/nextjs-website-tutorial4/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"nextjs-website-tutorial3\">前回</a>の続き<br>\nページ遷移時にアニメーションをつけたいと思って、いろいろ探しているうちに<a href=\"https://reactcommunity.org/react-transition-group/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Transition Group</a>へたどり着きました。</p>\n<h2 id=\"実現するまでに躓いたこと\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7%E3%81%AB%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\" aria-label=\"実現するまでに躓いたこと permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実現するまでに躓いたこと</h2>\n<h3 id=\"usestateuseeffectで切り替え--\" style=\"position:relative;\"><a href=\"#usestateuseeffect%E3%81%A7%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88--\" aria-label=\"usestateuseeffectで切り替え   permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState,useEffectで切り替え → ✕</h3>\n<p>CSSのクラスを定義しておいてuseStateで切り替えればいいのでは？と考えました。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> NextPage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> css <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@emotion/css'</span>\n\n<span class=\"token keyword\">const</span> bg <span class=\"token operator\">=</span> css<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  background-color: black;\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">Home</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">NextPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isState<span class=\"token punctuation\">,</span>setIsState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token function\">setIsState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isState <span class=\"token operator\">?</span> bg <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">aaa</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上記コードは２重の理由で実現できません。</p>\n<h4 id=\"1useeffectのクリーンアップ関数はcomponentwillunmountではない\" style=\"position:relative;\"><a href=\"#1useeffect%E3%81%AE%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E9%96%A2%E6%95%B0%E3%81%AFcomponentwillunmount%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84\" aria-label=\"1useeffectのクリーンアップ関数はcomponentwillunmountではない permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.useEffectのクリーンアップ関数はcomponentWillUnmountではない</h4>\n<p>正確に理解していなかったし、現時点でも理解が怪しいと思いますが、一旦知識のアップデートプロセスは下記のようになっています。</p>\n<ul>\n<li><code class=\"language-text\">useEffect</code> ののクリーンアップ関数(return)は <code class=\"language-text\">componentWillUnmount</code>、つまりコンポーネントが無くなる時に処理を解除する、、、と思っていた。\n<ul>\n<li>解除する処理を記述するということは、「何かしら処理を行うことができる」ということ・・・！</li>\n</ul>\n</li>\n<li>決定的な理由はないが、何でもしていいわけではないよな…という認識もあった。</li>\n<li>自身の考えはどうあれ、<code class=\"language-text\">useEffect</code>のクリーンアップ関数(return)は<code class=\"language-text\">unmount</code>ではなく<code class=\"language-text\">mount</code>時にも１度呼ばれることがわかった。</li>\n<li>つまりサンプルコードでは下記の動きになる\n<ul>\n<li><code class=\"language-text\">useState(false)</code>で初期化しているが、</li>\n<li><code class=\"language-text\">useEffect</code>で<code class=\"language-text\">return(()=>setIsState(true)</code>しているので</li>\n<li>最終的には<code class=\"language-text\">isState = true</code>となっているので、</li>\n<li><code class=\"language-text\">className</code>には<code class=\"language-text\">bg</code>がセットされてしまう</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2usestateを２種類管理して切り替える\" style=\"position:relative;\"><a href=\"#2usestate%E3%82%92%EF%BC%92%E7%A8%AE%E9%A1%9E%E7%AE%A1%E7%90%86%E3%81%97%E3%81%A6%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B\" aria-label=\"2usestateを２種類管理して切り替える permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.useStateを２種類管理して切り替える</h4>\n<p>じゃあ別のuseState用意して変更を検知したら<code class=\"language-text\">isState</code>を切り替えて、<code class=\"language-text\">className</code>も付与されるようなことを考えたが、そもそもこの考え方に欠陥がある。</p>\n<ul>\n<li><code class=\"language-text\">unmount</code>時に<code class=\"language-text\">state</code>を切り替えようとしている</li>\n<li>切り替えたところで<code class=\"language-text\">unmount</code>時には再レンダリングが行われないのでDOMは切り替わらない</li>\n</ul>\n<h2 id=\"spaで考える\" style=\"position:relative;\"><a href=\"#spa%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B\" aria-label=\"spaで考える permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SPAで考える</h2>\n<p>SPAならコンポーネントのアンマウント処理ができるのではないかと思ったが、元々SSGで作ろうとおもっていたため、Next.jsで一部SPAにできないか考えてみた。</p>\n<blockquote>\n<p>Linkタグを用いるとSSR時でもブラウザリロードすることなくコンポーネントを再レンダーすることができる。</p>\n</blockquote>\n<p>引用：<a href=\"https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.jsにおけるSPA的遷移の考え方</a></p>\n<p>Linkタグで再レンダリングは可能みたいだが、レンダリングするまでの間にアニメーションを挟みたいので、Next.jsのルーティングについて確認してみた。すると、<code class=\"language-text\">next/link</code>ではなく<code class=\"language-text\">next/router</code>の<code class=\"language-text\">useRouter</code>フックを使えば間に処理を挟めそうだった。\n参考：<a href=\"https://nextjs-ja-translation-docs.vercel.app/docs/api-reference/next/router#userouter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useRouter(公式)</a></p>\n<h2 id=\"アンマウント時のアニメーション実装方法\" style=\"position:relative;\"><a href=\"#%E3%82%A2%E3%83%B3%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88%E6%99%82%E3%81%AE%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%AE%9F%E8%A3%85%E6%96%B9%E6%B3%95\" aria-label=\"アンマウント時のアニメーション実装方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>アンマウント時のアニメーション実装方法</h2>\n<p>アンマウント時のアニメーションを実現する方法を模索している段階で<code class=\"language-text\">React Transition Group</code>のライブラリの存在を知ったのですが、調べてみると今回の目的をこのライブラリで果たせそうです。<br>\n参考：<a href=\"https://reactcommunity.org/react-transition-group/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Transition Group(公式)</a></p>\n<h3 id=\"react-transition-groupについて\" style=\"position:relative;\"><a href=\"#react-transition-group%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"react transition groupについて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Transition Groupについて</h3>\n<p>React Transition Groupはアニメーションを管理するライブラリで、アニメーションのCSSそのものは自身で記述します。React Transition Groupでは４つのコンポーネントが提供されていますが、今回はその中で<code class=\"language-text\">CSSTransition</code>を使っていきます。</p>\n<h3 id=\"csstransitionコンポーネント実装\" style=\"position:relative;\"><a href=\"#csstransition%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%AE%9F%E8%A3%85\" aria-label=\"csstransitionコンポーネント実装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSSTransitionコンポーネント実装</h3>\n<p>CSSTransitionの使い方や説明まで書くと記事が長くなってしまうので、参考記事を最後にまとめてあるのでそちらを参考にしてください。本記事の冒頭で紹介したコードを元に書き換えていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// .styles/globals.scss</span>\n<span class=\"token keyword\">@forward</span> <span class=\"token string\">\"styles.css\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">// .styles/styles.scss</span>\n<span class=\"token selector\">.bg </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>-exit-done </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>-appear </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token parent important\">&amp;</span>-appear-done </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>まずCSSを定義します。クラス名の説明については後述します。ちなみに<code class=\"language-text\">/page</code>のファイルに直接<code class=\"language-text\">import './styles/styles.scss'</code>とかいたら怒られました。副作用等の問題でやってはいけないらしい。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Global CSS cannot be imported from files other than your Custom &lt;App>. Due to the Global nature of stylesheets, and to avoid conflicts, Please move all first-party global CSS imports to pages/_app.js. Or convert the import to Component-Level CSS (CSS Modules).\nRead more: https://nextjs.org/docs/messages/css-global</code></pre></div>\n<p>次にページを修正します。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// pages/index.tsx</span>\n<span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> NextPage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CSSTransition <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-transition-group'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/router'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">Home</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">NextPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isState<span class=\"token punctuation\">,</span>setIsState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/sub'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CSSTransition</span></span> <span class=\"token attr-name\">in</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isState<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1000</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">classNames</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">link</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CSSTransition</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Home</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// pages/sub.tsx</span>\n<span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> NextPage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CSSTransition <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-transition-group'</span>\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">Sub</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">NextPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CSSTransition</span></span> <span class=\"token attr-name\">in</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">appear</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">timeout</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1000</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">classNames</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">sub page</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">CSSTransition</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Sub</code></pre></div>\n<p><img src=\"/47efbb1339326b49d519c40a0850ca37/2022-09-25-14-57.gif\" alt=\"CSSTransition webp\"></p>\n<p>ページ遷移時のアニメーションの実装ができました。</p>\n<h3 id=\"解説\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E8%AA%AC\" aria-label=\"解説 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解説</h3>\n<p>ページ遷移元の<code class=\"language-text\">index.tsx</code>の<code class=\"language-text\">CSSTransition</code>コンポーネントには３つの属性が設定されています。</p>\n<ul>\n<li>in : <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code>でアニメーションの状態を指定します</li>\n<li>timeout : アニメーションが変化するまでの時間</li>\n<li>classNames : 指定したクラス名とin propsの組み合わせで、アニメーションのクラス名が付与されます。</li>\n</ul>\n<p><code class=\"language-text\">isState</code>の初期値は<code class=\"language-text\">useState(true)</code>です。trueからfalseに変わる時、<code class=\"language-text\">classNames</code>で指定したクラス名と組み合わせて以下のように変化します。</p>\n<ol>\n<li>変化前：クラス名なし</li>\n<li>変化中：bg-exit, bg-exit-active</li>\n<li>変化後：bg-exit-done</li>\n</ol>\n<p><code class=\"language-text\">styles.scss</code>には<code class=\"language-text\">bg-exit-done</code>のスタイルが定義されているので、変化後に<code class=\"language-text\">bg-exit-done</code>のスタイルがあたります。サンプルコードでは<code class=\"language-text\">timeout</code>と同じ時間を<code class=\"language-text\">setTimeout</code>で待ってからページ遷移するようにしています。</p>\n<p>次にページ遷移先の<code class=\"language-text\">sub.tsx</code>では<code class=\"language-text\">appear</code>の属性が追加されています。<code class=\"language-text\">in={true}</code>かつ<code class=\"language-text\">appear={true}</code>とすると、マウント時のアニメーションを定義できます。クラス名が変化する流れはexitの時とあまり変わりません。</p>\n<ol>\n<li>ページ遷移する</li>\n<li>bg-appear, bg-appear-active</li>\n<li>bg-appear-done</li>\n</ol>\n<p>今回のサンプルコードでは<code class=\"language-text\">background-color: yellow</code>から<code class=\"language-text\">background-color: #fff</code>に変化するようにしています。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://nextjs-ja-translation-docs.vercel.app/docs/routing/introduction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.jsのルーティング(公式)</a></li>\n<li><a href=\"https://zenn.dev/ichigo_dev/articles/2b8c0b05cc6f74a5a507\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.jsにおけるSPA的遷移の考え方</a></li>\n<li><a href=\"https://reactcommunity.org/react-transition-group/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Transition Group(公式)</a></li>\n<li><a href=\"https://zenn.dev/jojojo/articles/568e8522cce340\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-transition-groupを使ってページ遷移にスライドアニメーションをつける方法</a></li>\n<li><a href=\"https://penpen-dev.com/blog/react-transition-group/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-transition-groupの使い方メモ</a></li>\n</ul>","frontmatter":{"date":"2022-09-26","slug":"/nextjs-website-tutorial4","title":"Next.jsでWebサイトを作る④〜ページ遷移時のアニメーション","tags":["next.js","react"],"thumbnail":{"publicURL":"/static/be2b530e376a69515a70a8b518576575/nextjs-logo.png"}},"excerpt":"前回の続き ページ遷移時にアニメーションをつけたいと思って、いろいろ探しているうちにReact Transition Groupへたどり着きました。 実現するまでに躓いたこと useState,useEffectで切り替え → ✕ CSS…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7%E3%81%AB%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\">実現するまでに躓いたこと</a></p>\n<ul>\n<li>\n<p><a href=\"#usestateuseeffect%E3%81%A7%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88--\">useState,useEffectで切り替え → ✕</a></p>\n<ul>\n<li><a href=\"#1useeffect%E3%81%AE%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E9%96%A2%E6%95%B0%E3%81%AFcomponentwillunmount%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84\">1.useEffectのクリーンアップ関数はcomponentWillUnmountではない</a></li>\n<li><a href=\"#2usestate%E3%82%92%EF%BC%92%E7%A8%AE%E9%A1%9E%E7%AE%A1%E7%90%86%E3%81%97%E3%81%A6%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B\">2.useStateを２種類管理して切り替える</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#spa%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B\">SPAで考える</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%A2%E3%83%B3%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88%E6%99%82%E3%81%AE%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%AE%9F%E8%A3%85%E6%96%B9%E6%B3%95\">アンマウント時のアニメーション実装方法</a></p>\n<ul>\n<li><a href=\"#react-transition-group%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">React Transition Groupについて</a></li>\n<li><a href=\"#csstransition%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E5%AE%9F%E8%A3%85\">CSSTransitionコンポーネント実装</a></li>\n<li><a href=\"#%E8%A7%A3%E8%AA%AC\">解説</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%8F%82%E8%80%83\">参考</a></p>\n</li>\n</ul>"},"site":{"siteMetadata":{"title":"うさ技術"}}},"pageContext":{"id":"257a95f3-e833-5790-8909-4b597cf92b0e","frontmatter__slug":"/nextjs-website-tutorial4","__params":{"frontmatter__slug":"nextjs-website-tutorial4"}}},"staticQueryHashes":["1304567263","209911134","3832698534"]}