{"version":3,"file":"component---src-pages-tags-tsx-44a46ddda63ecbba4d79.js","mappings":"sMAaA,MAAMA,GAAWC,EAAAA,EAAAA,SAAOC,EAAAA,GAAVC,WAAA,CAAAC,YAAAA,iBAAAC,YAAAA,gBAAGJ,CAAH,oGAsEd,UA7D6DK,IAGvD,cAHwD,KAC5DC,EAD4D,YAE5DC,GACIF,EACJ,MAAMG,EAAQF,EAAKG,kBAAkBC,MAC/BC,EAAeL,EAAKK,cACpB,WAAEC,GAAeN,EAAKG,mBACtB,IAAEI,GAAaN,EACfO,EACJ,UAAAR,EAAKS,YAAL,mBAAWC,oBAAX,SAAyBF,SAAWD,EAC7BP,EAAKS,KAAKC,aAAaF,QAD9B,UAC8CG,EAAAA,EAAAA,GAAWJ,GADzD,IAEI,GAEN,GAAqB,IAAjBL,EAAMU,OAAc,CACtB,MAAMC,EAAY,IAAIN,EAAP,UACf,OACEO,EAAAA,cAACC,EAAAA,EAAD,KACED,EAAAA,cAACrB,EAAD,CAAUuB,QAAQ,MAAMH,GACxBC,EAAAA,cAACG,EAAAA,EAAD,CAAKC,MAAOL,IACZC,EAAAA,cAAAA,IAAAA,KAAAA,uBAKN,MAAMD,GAAYN,aAAAA,EAAAA,EAAKY,OAAO,GAAGC,gBAAf,QAAAb,EAAgCA,aAAhC,EAAgCA,EAAKc,MAAM,UAA3C,QAAiD,IAC7DC,EAAiB,IAAIhB,EAAP,MAEpB,OACEQ,EAAAA,cAACC,EAAAA,EAAD,KACED,EAAAA,cAACrB,EAAD,CAAUuB,QAAQ,KAAKO,GAAI,CAAEC,SAAU,CAAEC,GAAI,UAAWC,GAAI,UACzDb,GAAa,OAEhBC,EAAAA,cAACnB,EAAAA,EAAD,CACEgC,UAAU,QACVJ,GAAI,CAAEK,QAAS,QAASJ,SAAU,WAAYK,UAAW,WAExDP,GAEHR,EAAAA,cAACG,EAAAA,EAAD,CAAKC,MAAOL,GAAa,MAAOiB,IAAKtB,IACrCM,EAAAA,cAACiB,EAAAA,EAAD,CACER,GAAI,CACFK,QAAS,OACTI,oBAAqB,uCACrBC,IAAK,EACLC,YAAa,CAAET,GAAI,EAAGC,GAAI,MAG3BxB,EAAMiC,KAAKC,GAERtB,EAAAA,cAACuB,EAAAA,EAAD,CACED,KAAMA,EACN/B,aAAcA,EACdiC,IAAKF,EAAKG,YAAaC","sources":["webpack://totolog34/./src/pages/tags.tsx"],"sourcesContent":["import * as React from 'react'\nimport { graphql, PageProps } from 'gatsby'\nimport { Card } from '../components/card'\nimport { Layout } from '../components/layout'\nimport { Seo } from '../components/seo'\nimport { Box, Typography } from '@mui/material'\nimport styled from 'styled-components'\nimport { getTagPath } from '..//script/common'\n\ntype Tag = {\n  tag?: string\n}\n\nconst StyledH1 = styled(Typography)`\n  &.MuiTypography-h1 {\n    margin-top: 2rem;\n    margin-bottom: 0.5rem;\n    margin-inline: auto;\n    text-align: center;\n  }\n`\n\nconst TagsPage: React.FC<PageProps<Queries.TagsPageQuery>> = ({\n  data,\n  pageContext,\n}) => {\n  const posts = data.allMarkdownRemark.nodes\n  const defaultImage = data.defaultImage\n  const { totalCount } = data.allMarkdownRemark\n  const { tag }: Tag = pageContext\n  const siteUrl =\n    data.site?.siteMetadata?.siteUrl && tag\n      ? `${data.site.siteMetadata.siteUrl}/tags/${getTagPath(tag)}/`\n      : ''\n\n  if (posts.length === 0) {\n    const tagHeader = `\"${tag}\" (0記事)`\n    return (\n      <Layout>\n        <StyledH1 variant=\"h1\">{tagHeader}</StyledH1>\n        <Seo title={tagHeader} />\n        <p>該当するタグの投稿記事がありません。</p>\n      </Layout>\n    )\n  }\n\n  const tagHeader = tag?.charAt(0).toUpperCase() + (tag?.slice(1) ?? '')\n  const tagHeaderSmall = `(${totalCount}記事)`\n\n  return (\n    <Layout>\n      <StyledH1 variant=\"h1\" sx={{ fontSize: { xs: '1.75rem', sm: '3rem' } }}>\n        {tagHeader || 'Tag'}\n      </StyledH1>\n      <Typography\n        component=\"small\"\n        sx={{ display: 'block', fontSize: '0.875rem', textAlign: 'center' }}\n      >\n        {tagHeaderSmall}\n      </Typography>\n      <Seo title={tagHeader || 'Tag'} url={siteUrl} />\n      <Box\n        sx={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\n          gap: 3,\n          marginBlock: { xs: 3, sm: 10 },\n        }}\n      >\n        {posts.map((post) => {\n          return (\n            <Card\n              post={post}\n              defaultImage={defaultImage}\n              key={post.frontmatter!.slug}\n            />\n          )\n        })}\n      </Box>\n    </Layout>\n  )\n}\n\nexport default TagsPage\n\nexport const query = graphql`\n  query TagsPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      nodes {\n        excerpt\n        frontmatter {\n          date\n          title\n          slug\n          description\n          tags\n          thumbnail {\n            childImageSharp {\n              gatsbyImageData(\n                width: 200\n                placeholder: BLURRED\n                formats: [AUTO, WEBP, AVIF]\n              )\n            }\n          }\n        }\n      }\n    }\n    defaultImage: file(relativePath: { eq: \"default.png\" }) {\n      childImageSharp {\n        gatsbyImageData(\n          width: 200\n          placeholder: BLURRED\n          formats: [AUTO, WEBP, AVIF]\n        )\n      }\n    }\n  }\n`\n"],"names":["StyledH1","styled","Typography","withConfig","displayName","componentId","_ref","data","pageContext","posts","allMarkdownRemark","nodes","defaultImage","totalCount","tag","siteUrl","site","siteMetadata","getTagPath","length","tagHeader","React","Layout","variant","Seo","title","charAt","toUpperCase","slice","tagHeaderSmall","sx","fontSize","xs","sm","component","display","textAlign","url","Box","gridTemplateColumns","gap","marginBlock","map","post","Card","key","frontmatter","slug"],"sourceRoot":""}